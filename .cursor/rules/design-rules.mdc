---
description: This ruleset is great for when we need to apply some design choices/css to our code
globs: "*.vue,*.css,*.scss"
alwaysApply: true
---
# Design Rules
- Reference @prime.css for available variables - pick the most suitable color! do not make up variables

## CSS Variables and Theming
- ALWAYS use PrimeVue CSS variables with the following namespaces:
  - Use `--p-content-*` variables for backgrounds, borders, and general UI elements
  - Use `--p-primary-*` variables for primary actions and highlights
  - Use `--p-form-field-*` variables for form elements
  - NEVER use `--p-surface-*` variables as they don't fit our theme
- Reference [prime.css](mdc:src/assets/prime.css) for available variables
- Do not make up variables!
- For custom variables, follow the pattern: `--app-{category}-{property}`
- Use CSS variables for all colors, spacing, and typography to maintain consistency

## Responsive Design
- Always design for mobile first
- Use these breakpoints consistently:
  ```css
  /* Mobile first approach */
  /* Base styles for mobile */
  
  /* Tablet (640px and up) */
  @media (min-width: 640px) { }
  
  /* Laptop (1024px and up) */
  @media (min-width: 1024px) { }
  
  /* Desktop (1280px and up) */
  @media (min-width: 1280px) { }
  ```
- Use Tailwind as a CSS framework - https://v2.tailwindcss.com/docs/responsive-design
- Ensure all interactive elements have appropriate hover and focus states
- Minimum touch target size should be 44x44px for mobile

## Component Design
- Use PrimeVue components whenever possible - https://primevue.org/
- For custom components, follow these guidelines:
  - Keep components small and focused on a single responsibility
  - Use slots for flexible content insertion
  - Use props for configuration
  - Use emits for communication with parent components
- For modals and dialogs:
  - Use PrimeVue Dialog component with proper props:
    - Use `modal` prop for modal dialogs
    - Use `dismissableMask` for allowing clicks outside to close
    - Use `closeOnEscape` for keyboard navigation
  - Ensure proper focus management for accessibility

## Accessibility
- Maintain a minimum contrast ratio of 4.5:1 for text
- Use semantic HTML elements (`<button>`, `<a>`, etc.) for interactive elements
- Include proper ARIA attributes when needed
- Ensure keyboard navigation works for all interactive elements
- Support screen readers by providing appropriate alt text and aria labels

## Examples
- For dialog components, follow the pattern in ConnectionDiagnostic.vue
- For form components, follow PrimeVue form guidelines
- For buttons:
  - Use `severity="primary"` for primary actions
  - Use `severity="secondary"` for secondary actions
  - Use `severity="success"` for confirmation actions
  - Use `severity="danger"` for destructive actions

## Layout Patterns
- Use CSS Grid for two-dimensional layouts
- Use Flexbox for one-dimensional layouts
- Maintain consistent spacing using the spacing variables
- Use consistent container widths across the application