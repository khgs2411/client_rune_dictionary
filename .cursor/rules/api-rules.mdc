---
description: Rules for Vue components and composition API usage
globs: "*.vue,*.ts"
alwaysApply: true
---
# Vue Component Rules

## Component Structure
- ALWAYS use Composition API with `<script setup lang="ts">` 
- Define props using TypeScript interfaces and `defineProps<Props>()`
- Use `defineEmits<{...}>()` for typed emits
- Use `ref()` and `reactive()` for reactive state
- Use `computed()` for derived state
- Use `onMounted()`, `onUnmounted()` for lifecycle hooks
- Keep components small and focused on a single responsibility

## File Organization
- Group related components in the same directory
- Use consistent naming conventions:
  - PascalCase for component names and files
  - camelCase for variables, functions, and methods
  - kebab-case for custom events
- Structure component files in this order:
  1. `<template>`
  2. `<script setup lang="ts">`
  3. `<style lang="scss" scoped>`

## State Management
- Use Pinia for global state management
- Keep component state local when possible
- Use props for parent-to-child communication
- Use events for child-to-parent communication
- Use provide/inject for deeply nested components
- Avoid direct DOM manipulation

## Performance Optimization
- Use `v-memo` for expensive renders
- Use `v-once` for static content
- Use `shallowRef()` for large objects that don't need deep reactivity
- Avoid unnecessary watchers and computed properties
- Use `defineAsyncComponent()` for code splitting

## PrimeVue Integration
- Import PrimeVue components directly from their packages:
  ```typescript
  import Button from 'primevue/button';
  import Dialog from 'primevue/dialog';
  ```
- Use PrimeVue directives when appropriate
- Follow PrimeVue component patterns for forms, dialogs, and data display
- Use PrimeVue's built-in validation when possible

## Conditional Rendering
- Use `v-if` for conditional rendering when the condition rarely changes
- Use `v-show` for toggling visibility when the element is frequently shown/hidden
- Use `v-for` with a unique `:key` for list rendering

## Event Handling
- Use `@click` instead of `v-on:click`
- Define handler functions in the script section
- Use arrow functions for inline handlers that need component context
- Avoid complex logic in template event handlers

## Form Handling
- Use `v-model` for two-way binding
- Use computed properties with getters and setters for complex form state
- Validate form inputs before submission
- Provide clear error messages for invalid inputs

## Accessibility
- Use semantic HTML elements
- Add ARIA attributes when necessary
- Ensure keyboard navigation works
- Test with screen readers

## Example Component
```vue
<template>
  <div class="component-container">
    <Dialog v-model:visible="dialogVisible" modal>
      <template #header>
        <h3>{{ title }}</h3>
      </template>
      
      <div class="content">
        <slot></slot>
      </div>
      
      <template #footer>
        <Button @click="onCancel" label="Cancel" severity="secondary" />
        <Button @click="onConfirm" label="Confirm" severity="primary" />
      </template>
    </Dialog>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';
import Dialog from 'primevue/dialog';
import Button from 'primevue/button';

interface Props {
  title: string;
}

const props = defineProps<Props>();
const emit = defineEmits<{
  (e: 'cancel'): void;
  (e: 'confirm'): void;
}>();

const dialogVisible = ref(true);

const onCancel = () => {
  emit('cancel');
};

const onConfirm = () => {
  emit('confirm');
};
</script>

<style lang="scss" scoped>
.component-container {
  /* Use CSS variables for theming */
  color: var(--p-content-color);
  background-color: var(--p-content-background);
  
  /* Mobile-first approach */
  padding: 1rem;
  
  /* Responsive design */
  @media (min-width: 640px) {
    padding: 1.5rem;
  }
}
</style> 