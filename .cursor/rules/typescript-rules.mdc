---
description: Rules for TypeScript usage and general code style
globs: "*.ts,*.tsx,*.vue"
alwaysApply: true
---
# TypeScript and Code Style Rules

## Type Definitions
- Always use explicit types for function parameters and return values
- Use interfaces for object shapes that can be implemented or extended
- Use type aliases for unions, intersections, and complex types
- Use generics for reusable components and functions
- Avoid `any` type - use `unknown` if type is truly unknown
- Use `Record<K, V>` for dynamic object properties
- Use discriminated unions for state management

## Naming Conventions
- Use PascalCase for class names, interfaces, type aliases, and enums
- Use camelCase for variables, functions, methods, and properties
- Use UPPER_CASE for constants and readonly static properties
- Use descriptive names that convey purpose
- Prefix interfaces with 'I' only when necessary to avoid naming conflicts
- Prefix type parameters with 'T' (e.g., `TValue`, `TKey`)

## Functions
- Prefer arrow functions for callbacks and methods
- Use function declarations for top-level functions
- Keep functions small and focused on a single responsibility
- Document complex functions with JSDoc comments
- Use optional parameters and default values instead of overloads when possible
- Use function overloads for complex type relationships

## Error Handling
- Use try/catch blocks for error-prone operations
- Create custom error classes for specific error types
- Use discriminated union types for error handling
- Provide meaningful error messages
- Use the Result pattern for operations that can fail

## Imports and Exports
- Use named exports for multiple exports from a file
- Use default exports for main component/class of a file
- Group imports by type (Vue, third-party, local)
- Use absolute imports for project modules
- Avoid circular dependencies

## Async Code
- Use async/await instead of raw Promises
- Handle Promise rejections with try/catch
- Use Promise.all for parallel operations
- Use Promise.allSettled when you need results from all promises regardless of rejection

## Type Guards and Assertions
- Use type guards (`typeof`, `instanceof`, property checks) for runtime type checking
- Use `as` assertions only when necessary and you're certain of the type
- Create custom type guards with type predicates (`is` functions)
- Avoid non-null assertions (`!`) when possible

## Enums and Constants
- Use const enums for values that won't change
- Use string enums for better debugging
- Use object literals with `as const` for simple constant collections
- Document enum values with JSDoc comments

## Example
```typescript
// Type definitions
interface User {
  id: string;
  username: string;
  email: string;
  isActive: boolean;
}

type UserResponse = {
  status: boolean;
  data: User | null;
  message?: string;
};

// Discriminated union for API results
type ApiResult<T> = 
  | { status: 'success'; data: T }
  | { status: 'error'; error: string; code: number };

// Custom type guard
function isUser(obj: unknown): obj is User {
  return (
    typeof obj === 'object' && 
    obj !== null &&
    'id' in obj &&
    'username' in obj &&
    'email' in obj &&
    'isActive' in obj
  );
}

/**
 * Fetches a user by ID
 * @param userId The ID of the user to fetch
 * @returns A promise that resolves to the user response
 */
const fetchUser = async (userId: string): Promise<ApiResult<User>> => {
  try {
    const response = await api.get<User>(`users/${userId}`);
    return {
      status: 'success',
      data: response.data
    };
  } catch (error) {
    console.error(`Failed to fetch user ${userId}:`, error);
    return {
      status: 'error',
      error: error instanceof Error ? error.message : 'Unknown error',
      code: error instanceof ApiError ? error.statusCode : 500
    };
  }
};

// Constants using as const
const HTTP_METHODS = {
  GET: 'GET',
  POST: 'POST',
  PUT: 'PUT',
  DELETE: 'DELETE'
} as const;

type HttpMethod = typeof HTTP_METHODS[keyof typeof HTTP_METHODS];
``` 